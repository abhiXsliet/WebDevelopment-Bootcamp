/* 
CSS FLEXBOX
-> Flexbox is a great way to get more flexibility in your layouts and to simplify resposive layout design.
-> It makes easy to align elements on a 2D plane and is preety easy to use once you get familiar with the main properties.

    -> The first step is to set display: flex on a "container" element. The "Children" to the flex container become flex items.
        A set of properties can be applied to flex containers, and have an effect to all the items as a whole, and a different 
        set of properties can be applied to flex items and have their effect on the targeted items.
        Flex items can in turn also be flex containers for the elements it contains, making it easy to create complex layouts.

        -> flexbox has two axis as main axis and cross axis 

    Flex-container Properties:-
    -> The flex container becomes flexible by setting the display property to flex :-
                        -> Flex-direction -> specify the direction in which the flex container's main axis runs. 
                        
                        -> Flex-wrap      -> Handles squizzing

                        -> Flex-flow      -> shorthand notation for both 'flex-wrap' and 'flex-direction'
                        
                        -> Justify-content -> This property aligns the items along the main axis (horizontal) of the container. 
                        
                        -> Align-items    -> This property aligns the items along the cross-axis (vertical) of the container
                        
                        -> Align-content  -> handles spacing b/w multiple rows of flex-items or alignment of rows
                                          -> This property is used to align and position multiple lines of content within a container.

    Flex-items Properties:-
    -> The direct child elements of a flex container automatically becomes flexible (flex) items.
                        -> Order        -> handles change in ordering
                                        -> If the same order property is applied for all flex-items then order will be determined by the default order as specified in the HTML markup.
                        
                        -> Flex-grow    -> Specifies how much a flex item should grow relative to other items when there is extra space in the flex container. 
                                           It takes a unitless value that represents the flex grow factor. 
                                           A value of 0 means the item won't grow at all, while a value of 1 means it will take up all available space.
                                        -> By default value is 0

                        -> Flex-shrink  -> Specifies how much a flex item should shrink relative to other items when there is not enough space in the flex container. 
                                           It takes a unitless value that represents the flex shrink factor. 
                                           A value of 0 means the item won't shrink at all, while a value greater than 0 will shrink the item proportionally to the other items.
                                        -> By default value is 1
                                        
                        -> Flex-basis   -> Specifies the initial size of a flex item before any extra space is distributed. 
                                           It takes a length value such as pixels or percentages, or the 'auto' keyword to use the item's default size.

                        -> Flex         -> shorthand notation for order, flex-grow, flex-shrink, flex-basis

                        -> Align-self   -> Specifies how a single flex item should align itself within the flex container along the cross-axis.
                                        -> It takes the same values as align-items, but applies only to the selected item, overriding the container's align-items value. 
                                           It can be used to align a single item differently than the others in the container.
    
*/     
*{
    /* content box becomes small */
    /* margin: 0; */
    /* padding: 0; */
    box-sizing: border-box;
}

.container {
    height: 400px;
    border: 2px solid green;
    display: flex;
    /* flex-direction: column; */
    /* flex-direction: column-reverse; */
    /* By Default since it follows the default main-axis which is horizontal */
    /* flex-direction: row; */
    /* flex-direction: row-reverse; */

    /* flex-wrap: nowrap; */
    /* flex-wrap: wrap; */
    /* flex-wrap: wrap-reverse; */

    /* shorthand notation for both flex-direction and flex-wrap */
    /* flex-flow: row wrap; */

    /* justify-content: flex-start; */
    /* justify-content: flex-end; */
    /* justify-content: center; */
    /* justify-content: space-between; */
    /* justify-content: space-around; */
    justify-content: space-evenly;
    /* justify-content: center; */


    /* align-items: flex-start; */
    /* align-items: flex-end; */
    /* align-items: center; */
    /* By default since it follows the cross-axis which is vertical */
    /* align-items: stretch; */
    /* align-items: baseline; */
}

.box {
    border: 1px solid red ;
    background-color: aqua;
    width: 50px;
}

.container-2 {
    height: 400px;
    margin: 30px;
    display: flex;
    border: 2px solid magenta;
    display: flex;
    flex-direction: row;
    /* flex-wrap: wrap; */

    justify-content: center;
    align-items: center;

    /* gap: d10px; */

    /* align-content: flex-start; */
    /* align-content: flex-end; */
    /* align-content: center; */
    /* align-content: space-around; */
    /* align-content: space-between; */
    /* align-content: space-evenly; */

}

.bx {
    border: 1px solid black;
    background-color: burlywood;
    /* width: 550px; */
    /* By Default flex-grow value is 0 */
    /* flex-grow: 3; */
    /* By Default flex-shring value is 1 */
    /* flex-shrink: 4px; */
    flex-basis: 20rem;
}

#box10 {
    order: 1;
    /* flex-grow: 1; */
    flex-shrink: 4;
}

#box30 {
    order: 8;
    flex-shrink: 2;
    /* flex-grow: 1; */

}

#box20 {
    order: 8;
    align-self: stretch;
}

/* what if the same order applied  */
/* If the same order property is applied for all flex-items then order will be determined by the default order as specified in the HTML markup. */
#box40 {
    order: 1;
    /* align-self: flex-end; */
    /* align-self: flex-start; */
    /* align-self: center; */
    /* align-self: baseline; */
}